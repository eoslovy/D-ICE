services:
  backbone-service:
    container_name: backbone-service
    build:
      context: ./backend/backbone
      dockerfile: Dockerfile
    restart: always
    env_file:
      - .env
    ports:
      - "18081:8080"
  gamekjh-service:
    container_name: gamekjh-service
    build:
      context: ./backend/game-KJH
      dockerfile: Dockerfile
    restart: always
    env_file:
      - .env
    ports:
      - "18082:8080"
    extra_hosts:
      - "bucket.localhost:172.17.0.1"
  gamecjm-service:
    container_name: gamecjm-service
    build:
      context: ./backend/game-CJM
      dockerfile: Dockerfile
    restart: always
    env_file:
      - .env
    ports:
      - "18083:8080"

  gamekyh-service:
    container_name: gamekyh-service
    build:
      context: ./backend/game-KYH
      dockerfile: Dockerfile
    restart: always
    env_file:
      - .env
    ports:
      - "18084:8080"

  gamelsr-service:
    container_name: gamelsr-service
    build:
      context: ./backend/game-LSR
      dockerfile: Dockerfile
    restart: always
    env_file:
      - .env
    ports:
      - "18085:8080"

  gameojs-service:
    container_name: gameojs-service
    build:
      context: ./backend/game-OJS
      dockerfile: Dockerfile
    restart: always
    env_file:
      - .env
    ports:
      - "18086:8080"

  gameydg-service:
    container_name: gameydg-service
    build:
      context: ./backend/game-YDG
      dockerfile: Dockerfile
    restart: always
    env_file:
      - .env
    ports:
      - "18087:8080"

  frontend-react:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
        NEXT_PUBLIC_CREDIT_WEBSOCKET_URL: ${NEXT_PUBLIC_CREDIT_WEBSOCKET_URL}

    env_file:
      - .env
    profiles:
      - build-only
    ports:
      - "80:80"

  springcloud-gateway:
    container_name: springcloud-gateway
    build:
      context: ./infra/springcloud-gateway
      dockerfile: Dockerfile
    restart: always
    env_file:
      - .env
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - backbone-service
      - gamekjh-service
      - gamecjm-service
      - gamekyh-service
      - gamelsr-service
      - gameojs-service
      - gameydg-service

  frontend-nginx:
    container_name: nginx
    build:
      context: ./infra/nginx
      dockerfile: Dockerfile
      args:
        FRONTEND_IMAGE: ${DOCKERHUB_USERNAME:-recreatekang}/d-ice-frontend:${IMAGE_TAG:-latest}
        NGINX: local_nginx.conf
    restart: always
    env_file:
      - .env
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infra/nginx/cert/localhost.pem:/etc/nginx/certs/localhost.pem
      - ./infra/nginx/cert/localhost-key.pem:/etc/nginx/certs/localhost-key.pem

  redis:
    container_name: redis
    build:
      context: ./infra/redis
      dockerfile: Dockerfile
    env_file:
      - .env
    restart: always
    ports:
      - "6379:6379"
  minio-bucket:
    build:
      context: ./infra/minio
      dockerfile: Dockerfile
    container_name: minio-bucket
    ports:
      - "9000:9000"      # API 포트
      - "9001:9001"      # 웹 콘솔 포트
    environment:
      MINIO_ROOT_USER: minioadmin         # 접속 ID (변경 권장)
      MINIO_ROOT_PASSWORD: minioadmin     # 접속 PW (변경 권장)
    volumes:
      - ./infra/minio/data:/data                      # 데이터 보관용 볼륨
    restart: always
